{
  "vite-react-app": {
    "files": {
      "/home/project/README.md": {
        "type": "file",
        "content": "# React + TypeScript + Vite\\n\\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n"
      },
      "/home/project/index.html": {
        "type": "file",
        "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\n  \"name\": \"vite-template\",\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc -b && vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@coral-xyz/anchor\": \"^0.31.1\",\n    \"@tailwindcss/vite\": \"^4.1.11\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.525.0\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"recharts\": \"^3.1.0\",\n    \"tailwind-merge\": \"^3.3.0\",\n    \"tailwindcss\": \"^4.1.7\",\n    \"tw-animate-css\": \"^1.3.0\",\n    \"vite-plugin-node-polyfills\": \"0.24.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22.15.21\",\n    \"@types/react\": \"^19.1.2\",\n    \"@types/react-dom\": \"^19.1.2\",\n    \"@vitejs/plugin-react\": \"^4.7.0\",\n    \"autoprefixer\": \"^10.4.21\",\n    \"globals\": \"^16.3.0\",\n    \"postcss\": \"^8.5.3\",\n    \"typescript\": \"~5.8.3\",\n    \"vite\": \"^6.3.5\"\n  },\n  \"packageManager\": \"pnpm@10.10.0\"\n}\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/App.tsx": {
        "type": "file",
        "content": "function App() {\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center w-screen h-screen\">\n        <h1 className='text-gray-300'>Hello world</h1>\n      </div>\n    </>\n  )\n}\n\nexport default App;\n"
      },
      "/home/project/src/index.css": {
        "type": "file",
        "content": "@import \"tailwindcss\";\n/* @import \"tw-animate-css\"; */\n"
      },
      "/home/project/src/main.tsx": {
        "type": "file",
        "content": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n)\n"
      },
      "/home/project/src/utils": {
        "type": "folder"
      },
      "/home/project/src/utils/utils.ts": {
        "type": "file",
        "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n"
      },
      "/home/project/tsconfig.app.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"erasableSyntaxOnly\": false,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"src\"]\n}\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n"
      },
      "/home/project/tsconfig.node.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"erasableSyntaxOnly\": false,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url';\nimport { nodePolyfills } from \"vite-plugin-node-polyfills\";\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss(), nodePolyfills()],\n  resolve: {\n    alias: {\n      \"@\": __dirname\n    },\n  },\n})\n"
      }
    }
  },
  "vite-solana-app": {
    "files": {
      "/home/project/README.md": {
        "type": "file",
        "content": "# React + TypeScript + Vite\\n\\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n"
      },
      "/home/project/index.html": {
        "type": "file",
        "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\n  \"name\": \"vite-template\",\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc -b && vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@coral-xyz/anchor\": \"^0.31.1\",\n    \"@tailwindcss/vite\": \"^4.1.11\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.525.0\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"recharts\": \"^3.1.0\",\n    \"tailwind-merge\": \"^3.3.0\",\n    \"tailwindcss\": \"^4.1.7\",\n    \"tw-animate-css\": \"^1.3.0\",\n    \"vite-plugin-node-polyfills\": \"0.24.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22.15.21\",\n    \"@types/react\": \"^19.1.2\",\n    \"@types/react-dom\": \"^19.1.2\",\n    \"@vitejs/plugin-react\": \"^4.7.0\",\n    \"autoprefixer\": \"^10.4.21\",\n    \"globals\": \"^16.3.0\",\n    \"postcss\": \"^8.5.3\",\n    \"typescript\": \"~5.8.3\",\n    \"vite\": \"^6.3.5\"\n  },\n  \"packageManager\": \"pnpm@10.10.0\"\n}\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/App.tsx": {
        "type": "file",
        "content": "function App() {\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center w-screen h-screen\">\n        <h1 className='text-gray-300'>Hello world</h1>\n      </div>\n    </>\n  )\n}\n\nexport default App;\n"
      },
      "/home/project/src/index.css": {
        "type": "file",
        "content": "@import \"tailwindcss\";\n/* @import \"tw-animate-css\"; */\n"
      },
      "/home/project/src/main.tsx": {
        "type": "file",
        "content": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n)\n"
      },
      "/home/project/src/utils": {
        "type": "folder"
      },
      "/home/project/src/utils/utils.ts": {
        "type": "file",
        "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n"
      },
      "/home/project/src-anchor": {
        "type": "folder"
      },
      "/home/project/src-anchor/.prettierignore": {
        "type": "file",
        "content": ".anchor\n.DS_Store\ntarget\nnode_modules\ndist\nbuild\ntest-ledger\n"
      },
      "/home/project/src-anchor/Anchor.toml": {
        "type": "file",
        "content": "[toolchain]\npackage_manager = \"yarn\"\n\n[features]\nresolution = true\nskip-lint = false\n\n[programs.localnet]\nsrc = \"9Q6Cjj1ZfeJmf7Ec17Yq8NU3fNronYoVmvkrcGR1NtmD\"\n\n[registry]\nurl = \"https://api.apr.dev\"\n\n[provider]\ncluster = \"localnet\"\nwallet = \"~/.config/solana/id.json\"\n\n[scripts]\ntest = \"yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts\"\n"
      },
      "/home/project/src-anchor/Cargo.toml": {
        "type": "file",
        "content": "[workspace]\nmembers = [\n    \"programs/*\"\n]\nresolver = \"2\"\n\n[profile.release]\noverflow-checks = true\nlto = \"fat\"\ncodegen-units = 1\n[profile.release.build-override]\nopt-level = 3\nincremental = false\ncodegen-units = 1\n"
      },
      "/home/project/src-anchor/app": {
        "type": "folder"
      },
      "/home/project/src-anchor/migrations": {
        "type": "folder"
      },
      "/home/project/src-anchor/migrations/deploy.ts": {
        "type": "file",
        "content": "// Migrations are an early feature. Currently, they're nothing more than this\n// single deploy script that's invoked from the CLI, injecting a provider\n// configured from the workspace's Anchor.toml.\n\nimport * as anchor from \"@coral-xyz/anchor\";\n\nmodule.exports = async function (provider: anchor.AnchorProvider) {\n  // Configure client to use the provider.\n  anchor.setProvider(provider);\n\n  // Add your deploy script here.\n};\n"
      },
      "/home/project/src-anchor/package.json": {
        "type": "file",
        "content": "{\n  \"license\": \"ISC\",\n  \"scripts\": {\n    \"lint:fix\": \"prettier */*.js \\\"*/**/*{.js,.ts}\\\" -w\",\n    \"lint\": \"prettier */*.js \\\"*/**/*{.js,.ts}\\\" --check\"\n  },\n  \"dependencies\": {\n    \"@coral-xyz/anchor\": \"^0.31.1\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.3.4\",\n    \"mocha\": \"^9.0.3\",\n    \"ts-mocha\": \"^10.0.0\",\n    \"@types/bn.js\": \"^5.1.0\",\n    \"@types/chai\": \"^4.3.0\",\n    \"@types/mocha\": \"^9.0.0\",\n    \"typescript\": \"^5.7.3\",\n    \"prettier\": \"^2.6.2\"\n  }\n}\n"
      },
      "/home/project/src-anchor/programs": {
        "type": "folder"
      },
      "/home/project/src-anchor/programs/src": {
        "type": "folder"
      },
      "/home/project/src-anchor/programs/src/Cargo.toml": {
        "type": "file",
        "content": "[package]\nname = \"src\"\nversion = \"0.1.0\"\ndescription = \"Created with Anchor\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\", \"lib\"]\nname = \"src\"\n\n[features]\ndefault = []\ncpi = [\"no-entrypoint\"]\nno-entrypoint = []\nno-idl = []\nno-log-ix-name = []\nidl-build = [\"anchor-lang/idl-build\"]\n\n\n[dependencies]\nanchor-lang = \"0.31.1\"\n\n"
      },
      "/home/project/src-anchor/programs/src/Xargo.toml": {
        "type": "file",
        "content": "[target.bpfel-unknown-unknown.dependencies.std]\nfeatures = []\n"
      },
      "/home/project/src-anchor/programs/src/src": {
        "type": "folder"
      },
      "/home/project/src-anchor/programs/src/src/lib.rs": {
        "type": "file",
        "content": "use anchor_lang::prelude::*;\n\ndeclare_id!(\"9Q6Cjj1ZfeJmf7Ec17Yq8NU3fNronYoVmvkrcGR1NtmD\");\n\n#[program]\npub mod src {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        msg!(\"Greetings from: {:?}\", ctx.program_id);\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize {}\n"
      },
      "/home/project/src-anchor/target": {
        "type": "folder"
      },
      "/home/project/src-anchor/target/deploy": {
        "type": "folder"
      },
      "/home/project/src-anchor/target/deploy/src-keypair.json": {
        "type": "file",
        "content": "[91,134,31,25,15,204,116,111,156,151,37,49,233,28,137,119,180,243,106,25,49,42,21,97,106,138,217,245,61,250,107,122,124,199,188,128,229,99,11,143,111,40,128,181,23,22,142,186,81,141,195,197,106,230,81,186,113,157,12,230,61,253,164,184]"
      },
      "/home/project/src-anchor/tests": {
        "type": "folder"
      },
      "/home/project/src-anchor/tests/src.ts": {
        "type": "file",
        "content": "import * as anchor from \"@coral-xyz/anchor\";\nimport { Program } from \"@coral-xyz/anchor\";\nimport { Src } from \"../target/types/src\";\n\ndescribe(\"src\", () => {\n  // Configure the client to use the local cluster.\n  anchor.setProvider(anchor.AnchorProvider.env());\n\n  const program = anchor.workspace.src as Program<Src>;\n\n  it(\"Is initialized!\", async () => {\n    // Add your test here.\n    const tx = await program.methods.initialize().rpc();\n    console.log(\"Your transaction signature\", tx);\n  });\n});\n"
      },
      "/home/project/src-anchor/tsconfig.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"types\": [\"mocha\", \"chai\"],\n    \"typeRoots\": [\"./node_modules/@types\"],\n    \"lib\": [\"es2015\"],\n    \"module\": \"commonjs\",\n    \"target\": \"es6\",\n    \"esModuleInterop\": true\n  }\n}\n"
      },
      "/home/project/tsconfig.app.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"erasableSyntaxOnly\": false,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"src\"]\n}\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n"
      },
      "/home/project/tsconfig.node.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"erasableSyntaxOnly\": false,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url';\nimport { nodePolyfills } from \"vite-plugin-node-polyfills\";\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss(), nodePolyfills()],\n  resolve: {\n    alias: {\n      \"@\": __dirname\n    },\n  },\n})\n"
      }
    }
  },
  "vite-threejs-app": {
    "files": {
      "/home/project/index.html": {
        "type": "file",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/threejs-icon.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + Three.js</title>\n  </head>\n  <body>\n    <script type=\"module\" src=\"/src/scene.ts\"></script>\n  </body>\n</html>\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\n  \"name\": \"threejs-starter-vite\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/vite\": \"^4.0.0-alpha.25\",\n    \"@types/three\": \"^0.176.0\",\n    \"typescript\": \"^5.8.2\",\n    \"tailwindcss\": \"^4.0.0-alpha.25\",\n    \"vite\": \"^6.3.5\",\n    \"vite-plugin-node-polyfills\": \"^0.22.0\"\n  },\n  \"dependencies\": {\n    \"lil-gui\": \"^0.20.0\",\n    \"stats.js\": \"^0.17.0\",\n    \"three\": \"^0.176.0\"\n  }\n}\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/scene.ts": {
        "type": "file",
        "content": "import * as THREE from 'three';\n\ninterface SceneSettings {\n  wireframe: boolean;\n  rotationSpeed: number;\n  backgroundColor: string;\n  enableAnimation: boolean;\n}\n\nexport class SceneManager {\n  private scene: THREE.Scene;\n  private camera: THREE.PerspectiveCamera;\n  private renderer: THREE.WebGLRenderer;\n  private cube: THREE.Mesh;\n  private animationId: number = 0;\n\n  // FPS tracking\n  private frameCount: number = 0;\n  private lastTime: number = 0;\n  private fps: number = 0;\n  private fpsElement: HTMLElement;\n\n  // Settings\n  private settings: SceneSettings = {\n    wireframe: false,\n    rotationSpeed: 0.01,\n    backgroundColor: '#1a1a1a',\n    enableAnimation: true\n  };\n\n  constructor() {\n    this.initScene();\n    this.initUI();\n    this.setupEventListeners();\n    this.animate();\n  }\n\n  private initScene(): void {\n    // Scene\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(this.settings.backgroundColor);\n\n    // Camera\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    this.camera.position.z = 5;\n\n    // Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    document.body.appendChild(this.renderer.domElement);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\n    this.scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    directionalLight.castShadow = true;\n    this.scene.add(directionalLight);\n\n    // Create a cube\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const material = new THREE.MeshLambertMaterial({\n      color: 0x00ff00,\n      wireframe: this.settings.wireframe\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.cube.castShadow = true;\n    this.scene.add(this.cube);\n\n    // Ground plane\n    const groundGeometry = new THREE.PlaneGeometry(10, 10);\n    const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x888888 });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = -2;\n    ground.receiveShadow = true;\n    this.scene.add(ground);\n  }\n\n  private initUI(): void {\n    // FPS Counter\n    this.fpsElement = document.createElement('div');\n    this.fpsElement.id = 'fps-counter';\n    this.fpsElement.textContent = 'FPS: 0';\n    document.body.appendChild(this.fpsElement);\n\n    // Settings Panel\n    const settingsPanel = document.createElement('div');\n    settingsPanel.id = 'settings-panel';\n    settingsPanel.innerHTML = `\n      <h3>Settings</h3>\n      <div class=\"setting-item\">\n        <label>\n          <input type=\"checkbox\" id=\"wireframe\" ${this.settings.wireframe ? 'checked' : ''}>\n          Wireframe Mode\n        </label>\n      </div>\n      <div class=\"setting-item\">\n        <label>\n          Animation Speed: <span id=\"speed-value\">${this.settings.rotationSpeed.toFixed(3)}</span>\n        </label>\n        <input type=\"range\" id=\"rotation-speed\" min=\"0\" max=\"0.05\" step=\"0.001\" value=\"${this.settings.rotationSpeed}\">\n      </div>\n      <div class=\"setting-item\">\n        <label>\n          Background Color:\n        </label>\n        <input type=\"color\" id=\"bg-color\" value=\"${this.settings.backgroundColor}\">\n      </div>\n      <div class=\"setting-item\">\n        <label>\n          <input type=\"checkbox\" id=\"enable-animation\" ${this.settings.enableAnimation ? 'checked' : ''}>\n          Enable Animation\n        </label>\n      </div>\n      <button id=\"reset-button\">Reset Scene</button>\n    `;\n    document.body.appendChild(settingsPanel);\n  }\n\n  private setupEventListeners(): void {\n    // Window resize\n    window.addEventListener('resize', () => this.onWindowResize());\n\n    // Settings controls\n    const wireframeToggle = document.getElementById('wireframe') as HTMLInputElement;\n    wireframeToggle?.addEventListener('change', (e) => {\n      this.settings.wireframe = (e.target as HTMLInputElement).checked;\n      (this.cube.material as THREE.MeshLambertMaterial).wireframe = this.settings.wireframe;\n    });\n\n    const speedSlider = document.getElementById('rotation-speed') as HTMLInputElement;\n    const speedValue = document.getElementById('speed-value');\n    speedSlider?.addEventListener('input', (e) => {\n      this.settings.rotationSpeed = parseFloat((e.target as HTMLInputElement).value);\n      if (speedValue) speedValue.textContent = this.settings.rotationSpeed.toFixed(3);\n    });\n\n    const bgColorPicker = document.getElementById('bg-color') as HTMLInputElement;\n    bgColorPicker?.addEventListener('change', (e) => {\n      this.settings.backgroundColor = (e.target as HTMLInputElement).value;\n      this.scene.background = new THREE.Color(this.settings.backgroundColor);\n    });\n\n    const animationToggle = document.getElementById('enable-animation') as HTMLInputElement;\n    animationToggle?.addEventListener('change', (e) => {\n      this.settings.enableAnimation = (e.target as HTMLInputElement).checked;\n    });\n\n    const resetButton = document.getElementById('reset-button');\n    resetButton?.addEventListener('click', () => this.resetScene());\n  }\n\n  private onWindowResize(): void {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  private updateFPS(): void {\n    this.frameCount++;\n    const currentTime = performance.now();\n\n    if (currentTime - this.lastTime >= 1000) {\n      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));\n      this.fpsElement.textContent = `FPS: ${this.fps}`;\n      this.frameCount = 0;\n      this.lastTime = currentTime;\n    }\n  }\n\n  private resetScene(): void {\n    this.cube.rotation.set(0, 0, 0);\n    this.cube.position.set(0, 0, 0);\n    this.camera.position.set(0, 0, 5);\n    this.camera.lookAt(0, 0, 0);\n  }\n\n  private animate(): void {\n    this.animationId = requestAnimationFrame(() => this.animate());\n\n    if (this.settings.enableAnimation) {\n      this.cube.rotation.x += this.settings.rotationSpeed;\n      this.cube.rotation.y += this.settings.rotationSpeed;\n    }\n\n    this.updateFPS();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  public dispose(): void {\n    cancelAnimationFrame(this.animationId);\n    this.renderer.dispose();\n\n    // Clean up geometries and materials\n    this.scene.traverse((object) => {\n      if (object instanceof THREE.Mesh) {\n        object.geometry.dispose();\n        if (object.material instanceof THREE.Material) {\n          object.material.dispose();\n        }\n      }\n    });\n  }\n}\n\n// Initialize the scene when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new SceneManager();\n});\n"
      },
      "/home/project/src/style.css": {
        "type": "file",
        "content": "/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  overflow: hidden;\n  background: #000;\n  color: #fff;\n}\n\ncanvas {\n  display: block;\n  cursor: grab;\n}\n\ncanvas:active {\n  cursor: grabbing;\n}\n\n/* FPS Counter */\n#fps-counter {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.7);\n  color: #00ff00;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  font-weight: bold;\n  border: 1px solid #333;\n  z-index: 100;\n  backdrop-filter: blur(5px);\n}\n\n/* Settings Panel */\n#settings-panel {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: rgba(20, 20, 20, 0.9);\n  border: 1px solid #444;\n  border-radius: 8px;\n  padding: 20px;\n  min-width: 250px;\n  max-height: 80vh;\n  overflow-y: auto;\n  backdrop-filter: blur(10px);\n  z-index: 100;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\n}\n\n#settings-panel h3 {\n  margin-bottom: 15px;\n  color: #fff;\n  font-size: 16px;\n  font-weight: 600;\n  border-bottom: 1px solid #444;\n  padding-bottom: 8px;\n}\n\n.setting-item {\n  margin-bottom: 15px;\n}\n\n.setting-item label {\n  display: block;\n  margin-bottom: 5px;\n  color: #ccc;\n  font-size: 13px;\n  font-weight: 500;\n}\n\n/* Input styles */\ninput[type=\"checkbox\"] {\n  margin-right: 8px;\n  transform: scale(1.1);\n  accent-color: #00ff00;\n}\n\ninput[type=\"range\"] {\n  width: 100%;\n  height: 4px;\n  background: #333;\n  outline: none;\n  border-radius: 2px;\n  margin-top: 5px;\n}\n\ninput[type=\"range\"]::-webkit-slider-thumb {\n  appearance: none;\n  width: 16px;\n  height: 16px;\n  background: #00ff00;\n  cursor: pointer;\n  border-radius: 50%;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\ninput[type=\"range\"]::-moz-range-thumb {\n  width: 16px;\n  height: 16px;\n  background: #00ff00;\n  cursor: pointer;\n  border-radius: 50%;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\ninput[type=\"color\"] {\n  width: 40px;\n  height: 30px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background: transparent;\n}\n\ninput[type=\"color\"]::-webkit-color-swatch-wrapper {\n  padding: 0;\n  border-radius: 4px;\n  border: 1px solid #555;\n}\n\ninput[type=\"color\"]::-webkit-color-swatch {\n  border: none;\n  border-radius: 3px;\n}\n\n/* Button styles */\n#reset-button {\n  width: 100%;\n  padding: 10px;\n  background: linear-gradient(45deg, #333, #555);\n  color: #fff;\n  border: 1px solid #666;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 13px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  margin-top: 10px;\n}\n\n#reset-button:hover {\n  background: linear-gradient(45deg, #444, #666);\n  border-color: #777;\n  transform: translateY(-1px);\n}\n\n#reset-button:active {\n  transform: translateY(0);\n  background: linear-gradient(45deg, #222, #444);\n}\n\n/* Speed value display */\n#speed-value {\n  color: #00ff00;\n  font-family: 'Courier New', monospace;\n  font-weight: bold;\n  margin-left: 5px;\n}\n\n/* Scrollbar styling */\n#settings-panel::-webkit-scrollbar {\n  width: 6px;\n}\n\n#settings-panel::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 3px;\n}\n\n#settings-panel::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 3px;\n}\n\n#settings-panel::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  #settings-panel {\n    right: 10px;\n    left: 10px;\n    top: 10px;\n    min-width: auto;\n    max-height: 60vh;\n  }\n\n  #fps-counter {\n    top: 10px;\n    left: 10px;\n    font-size: 12px;\n    padding: 6px 10px;\n  }\n}\n\n@media (max-width: 480px) {\n  #settings-panel {\n    padding: 15px;\n  }\n\n  #settings-panel h3 {\n    font-size: 14px;\n  }\n\n  .setting-item label {\n    font-size: 12px;\n  }\n\n  #reset-button {\n    padding: 8px;\n    font-size: 12px;\n  }\n}\n\n/* Loading animation */\n@keyframes pulse {\n  0% { opacity: 0.6; }\n  50% { opacity: 1; }\n  100% { opacity: 0.6; }\n}\n\n.loading {\n  animation: pulse 1.5s ease-in-out infinite;\n}\n\n/* Smooth transitions */\n/* Removed redundant universal selector rule */\n\n/* Focus states for accessibility */\ninput:focus,\nbutton:focus {\n  outline: 2px solid #00ff00;\n  outline-offset: 2px;\n}\n\n/* Selection styling */\n::selection {\n  background: rgba(0, 255, 0, 0.3);\n  color: #fff;\n}\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"ESNext\",\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitReturns\": true\n  },\n  \"include\": [\"src\"]\n}\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url'\nimport { nodePolyfills } from 'vite-plugin-node-polyfills'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    tailwindcss(),\n    nodePolyfills()\n  ],\n  resolve: {\n    alias: {\n      \"@\": __dirname\n    },\n  },\n  // Optimize Three.js imports\n  optimizeDeps: {\n    include: ['three']\n  },\n  // Configure build for better Three.js performance\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          'three': ['three']\n        }\n      }\n    }\n  },\n  // Enable source maps for development\n  css: {\n    devSourcemap: true\n  }\n})"
      }
    }
  }
}