{
  "vite-react-app": {
    "files": {
      "/home/project/index.html": {
        "type": "file",
        "content": "<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Vite + React + TS</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\r\n  </body>\r\n</html>\r\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\r\n  \"name\": \"vite-template\",\r\n  \"private\": true,\r\n  \"version\": \"0.0.1\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"dev\": \"vite\",\r\n    \"build\": \"tsc -b && vite build\",\r\n    \"preview\": \"vite preview\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@coral-xyz/anchor\": \"^0.31.1\",\r\n    \"@tailwindcss/vite\": \"^4.1.11\",\r\n    \"clsx\": \"^2.1.1\",\r\n    \"lucide-react\": \"^0.525.0\",\r\n    \"react\": \"^19.1.0\",\r\n    \"react-dom\": \"^19.1.0\",\r\n    \"recharts\": \"^3.1.0\",\r\n    \"tailwind-merge\": \"^3.3.0\",\r\n    \"tailwindcss\": \"^4.1.7\",\r\n    \"tw-animate-css\": \"^1.3.0\",\r\n    \"vite-plugin-node-polyfills\": \"0.24.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^22.15.21\",\r\n    \"@types/react\": \"^19.1.2\",\r\n    \"@types/react-dom\": \"^19.1.2\",\r\n    \"@vitejs/plugin-react\": \"^4.7.0\",\r\n    \"autoprefixer\": \"^10.4.21\",\r\n    \"globals\": \"^16.3.0\",\r\n    \"postcss\": \"^8.5.3\",\r\n    \"typescript\": \"~5.8.3\",\r\n    \"vite\": \"^6.3.5\"\r\n  },\r\n  \"packageManager\": \"pnpm@10.10.0\"\r\n}\r\n"
      },
      "/home/project/README.md": {
        "type": "file",
        "content": "# React + TypeScript + Vite\\n\\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\r\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/App.tsx": {
        "type": "file",
        "content": "function App() {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center justify-center w-screen h-screen\">\r\n        <h1 className='text-gray-300'>Hello world</h1>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n"
      },
      "/home/project/src/index.css": {
        "type": "file",
        "content": "@import \"tailwindcss\";\r\n/* @import \"tw-animate-css\"; */\r\n"
      },
      "/home/project/src/main.tsx": {
        "type": "file",
        "content": "import { StrictMode } from 'react'\r\nimport { createRoot } from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\ncreateRoot(document.getElementById('root')!).render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n)\r\n"
      },
      "/home/project/src/utils": {
        "type": "folder"
      },
      "/home/project/src/utils/utils.ts": {
        "type": "file",
        "content": "import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\r\n"
      },
      "/home/project/tsconfig.app.json": {
        "type": "file",
        "content": "{\r\n  \"compilerOptions\": {\r\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\r\n    \"target\": \"ES2020\",\r\n    \"useDefineForClassFields\": true,\r\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\r\n    \"module\": \"ESNext\",\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"verbatimModuleSyntax\": false,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n    \"jsx\": \"react-jsx\",\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": false,\r\n    \"noUnusedParameters\": false,\r\n    \"erasableSyntaxOnly\": false,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUncheckedSideEffectImports\": true,\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@/*\": [\"./*\"]\r\n    }\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\r\n  \"files\": [],\r\n  \"references\": [\r\n    { \"path\": \"./tsconfig.app.json\" },\r\n    { \"path\": \"./tsconfig.node.json\" }\r\n  ],\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@/*\": [\"./*\"]\r\n    }\r\n  }\r\n}\r\n"
      },
      "/home/project/tsconfig.node.json": {
        "type": "file",
        "content": "{\r\n  \"compilerOptions\": {\r\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\r\n    \"target\": \"ES2022\",\r\n    \"lib\": [\"ES2023\"],\r\n    \"module\": \"ESNext\",\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"verbatimModuleSyntax\": false,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"erasableSyntaxOnly\": false,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUncheckedSideEffectImports\": true,\r\n  },\r\n  \"include\": [\"vite.config.ts\"]\r\n}\r\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\r\n\r\nimport { defineConfig } from 'vite'\r\nimport react from '@vitejs/plugin-react'\r\nimport tailwindcss from '@tailwindcss/vite'\r\nimport { fileURLToPath } from 'node:url';\r\nimport { nodePolyfills } from \"vite-plugin-node-polyfills\";\r\n\r\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\r\n\r\n// https://vite.dev/config/\r\nexport default defineConfig({\r\n  plugins: [react(), tailwindcss(), nodePolyfills()],\r\n  resolve: {\r\n    alias: {\r\n      \"@\": __dirname\r\n    },\r\n  },\r\n})\r\n"
      }
    }
  },
  "vite-threejs-app": {
    "files": {
      "/home/project/index.html": {
        "type": "file",
        "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/threejs-icon.svg\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Three.js + TypeScript + Vite</title>\r\n  </head>\r\n  <body>\r\n    <canvas id=\"scene\"></canvas>\r\n    <script type=\"module\" src=\"/src/scene.ts\"></script>\r\n  </body>\r\n</html>\r\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\r\n  \"name\": \"threejs-starter-vite\",\r\n  \"private\": true,\r\n  \"version\": \"1.0.0\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"dev\": \"vite\",\r\n    \"build\": \"tsc && vite build\",\r\n    \"preview\": \"vite preview\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@tailwindcss/vite\": \"^4.0.0-alpha.25\",\r\n    \"@types/three\": \"^0.176.0\",\r\n    \"typescript\": \"^5.8.2\",\r\n    \"tailwindcss\": \"^4.0.0-alpha.25\",\r\n    \"vite\": \"^6.3.5\",\r\n    \"vite-plugin-node-polyfills\": \"^0.22.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"lil-gui\": \"^0.20.0\",\r\n    \"stats.js\": \"^0.17.0\",\r\n    \"three\": \"^0.176.0\"\r\n  }\r\n}\r\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/helpers": {
        "type": "folder"
      },
      "/home/project/src/helpers/animations.ts": {
        "type": "file",
        "content": "import { Clock, Object3D } from 'three'\r\n\r\nfunction rotate(object: Object3D, clock: Clock, radiansPerSecond: number = Math.PI * 2) {\r\n  const rotationAngle = clock.getElapsedTime() * radiansPerSecond\r\n  object.rotation.y = rotationAngle\r\n}\r\n\r\nfunction bounce(\r\n  object: Object3D,\r\n  clock: Clock,\r\n  bounceSpeed: number = 1.5,\r\n  amplitude: number = 0.4,\r\n  yLowerBound: number = 0.5\r\n) {\r\n  const elapsed = clock.getElapsedTime()\r\n  const yPos = Math.abs(Math.sin(elapsed * bounceSpeed) * amplitude)\r\n  object.position.y = yPos + yLowerBound\r\n}\r\n\r\nexport { rotate, bounce }\r\n"
      },
      "/home/project/src/helpers/fullscreen.ts": {
        "type": "file",
        "content": "// @ts-nocheck\r\nexport function toggleFullScreen(canvas: HTMLElement) {\r\n  if (document.fullscreenElement) {\r\n    document.exitFullscreen()\r\n  } else if (!document.fullscreenElement && canvas.requestFullscreen) {\r\n    canvas.requestFullscreen()\r\n  }\r\n\r\n  // 👇 safari -> doesn't support the standard yet\r\n  else if (document.webkitFullscreenElement) {\r\n    document.webkitExitFullscreen()\r\n  } else if (!document.webkitFullscreenElement && canvas.webkitRequestFullscreen) {\r\n    canvas.webkitRequestFullscreen()\r\n  }\r\n}\r\n"
      },
      "/home/project/src/helpers/responsiveness.ts": {
        "type": "file",
        "content": "import { WebGLRenderer } from 'three'\r\n\r\nexport function resizeRendererToDisplaySize(renderer: WebGLRenderer) {\r\n  const canvas = renderer.domElement\r\n  const width = canvas.clientWidth\r\n  const height = canvas.clientHeight\r\n  const needResize = canvas.width !== width || canvas.height !== height\r\n  if (needResize) {\r\n    renderer.setSize(width, height, false)\r\n  }\r\n  return needResize\r\n}\r\n"
      },
      "/home/project/src/scene.ts": {
        "type": "file",
        "content": "import GUI from 'lil-gui'\r\nimport {\r\n  AmbientLight,\r\n  AxesHelper,\r\n  BoxGeometry,\r\n  Clock,\r\n  GridHelper,\r\n  LoadingManager,\r\n  Mesh,\r\n  MeshLambertMaterial,\r\n  MeshStandardMaterial,\r\n  PCFSoftShadowMap,\r\n  PerspectiveCamera,\r\n  PlaneGeometry,\r\n  PointLight,\r\n  PointLightHelper,\r\n  Scene,\r\n  WebGLRenderer,\r\n} from 'three'\r\nimport { DragControls } from 'three/addons/controls/DragControls.js'\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\r\nimport Stats from 'stats.js'\r\nimport * as animations from './helpers/animations'\r\nimport { toggleFullScreen } from './helpers/fullscreen'\r\nimport { resizeRendererToDisplaySize } from './helpers/responsiveness'\r\nimport './style.css'\r\n\r\nconst CANVAS_ID = 'scene'\r\n\r\nlet canvas: HTMLElement\r\nlet renderer: WebGLRenderer\r\nlet scene: Scene\r\nlet loadingManager: LoadingManager\r\nlet ambientLight: AmbientLight\r\nlet pointLight: PointLight\r\nlet cube: Mesh\r\nlet camera: PerspectiveCamera\r\nlet cameraControls: OrbitControls\r\nlet dragControls: DragControls\r\nlet axesHelper: AxesHelper\r\nlet pointLightHelper: PointLightHelper\r\nlet clock: Clock\r\nlet stats: Stats\r\nlet gui: GUI\r\n\r\nconst animation = { enabled: true, play: true }\r\n\r\ninit()\r\nanimate()\r\n\r\nfunction init() {\r\n  // ===== 🖼️ CANVAS, RENDERER, & SCENE =====\r\n  {\r\n    canvas = document.querySelector(`canvas#${CANVAS_ID}`)!\r\n    renderer = new WebGLRenderer({ canvas, antialias: true, alpha: true })\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n    renderer.shadowMap.enabled = true\r\n    renderer.shadowMap.type = PCFSoftShadowMap\r\n    scene = new Scene()\r\n  }\r\n\r\n  // ===== 👨🏻‍💼 LOADING MANAGER =====\r\n  {\r\n    loadingManager = new LoadingManager()\r\n\r\n    loadingManager.onStart = () => {\r\n      console.log('loading started')\r\n    }\r\n    loadingManager.onProgress = (url, loaded, total) => {\r\n      console.log('loading in progress:')\r\n      console.log(`${url} -> ${loaded} / ${total}`)\r\n    }\r\n    loadingManager.onLoad = () => {\r\n      console.log('loaded!')\r\n    }\r\n    loadingManager.onError = () => {\r\n      console.log('❌ error while loading')\r\n    }\r\n  }\r\n\r\n  // ===== 💡 LIGHTS =====\r\n  {\r\n    ambientLight = new AmbientLight('white', 0.4)\r\n    pointLight = new PointLight('white', 20, 100)\r\n    pointLight.position.set(-2, 2, 2)\r\n    pointLight.castShadow = true\r\n    pointLight.shadow.radius = 4\r\n    pointLight.shadow.camera.near = 0.1\r\n    pointLight.shadow.camera.far = 1000\r\n    pointLight.shadow.mapSize.width = 2048\r\n    pointLight.shadow.mapSize.height = 2048\r\n    scene.add(ambientLight)\r\n    scene.add(pointLight)\r\n  }\r\n\r\n  // ===== 📦 OBJECTS =====\r\n  {\r\n    const sideLength = 1\r\n    const cubeGeometry = new BoxGeometry(sideLength, sideLength, sideLength)\r\n    const cubeMaterial = new MeshStandardMaterial({\r\n      color: '#f69f1f',\r\n      metalness: 0.5,\r\n      roughness: 0.7,\r\n    })\r\n    cube = new Mesh(cubeGeometry, cubeMaterial)\r\n    cube.castShadow = true\r\n    cube.position.y = 0.5\r\n\r\n    const planeGeometry = new PlaneGeometry(3, 3)\r\n    const planeMaterial = new MeshLambertMaterial({\r\n      color: 'gray',\r\n      emissive: 'teal',\r\n      emissiveIntensity: 0.2,\r\n      side: 2,\r\n      transparent: true,\r\n      opacity: 0.4,\r\n    })\r\n    const plane = new Mesh(planeGeometry, planeMaterial)\r\n    plane.rotateX(Math.PI / 2)\r\n    plane.receiveShadow = true\r\n\r\n    scene.add(cube)\r\n    scene.add(plane)\r\n  }\r\n\r\n  // ===== 🎥 CAMERA =====\r\n  {\r\n    camera = new PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000)\r\n    camera.position.set(2, 2, 5)\r\n  }\r\n\r\n  // ===== 🕹️ CONTROLS =====\r\n  {\r\n    cameraControls = new OrbitControls(camera, canvas)\r\n    cameraControls.target = cube.position.clone()\r\n    cameraControls.enableDamping = true\r\n    cameraControls.autoRotate = false\r\n    cameraControls.update()\r\n\r\n    dragControls = new DragControls([cube], camera, renderer.domElement)\r\n    dragControls.addEventListener('hoveron', (event) => {\r\n      const mesh = event.object as Mesh\r\n      const material = mesh.material as MeshStandardMaterial\r\n      material.emissive.set('green')\r\n    })\r\n    dragControls.addEventListener('hoveroff', (event) => {\r\n      const mesh = event.object as Mesh\r\n      const material = mesh.material as MeshStandardMaterial\r\n      material.emissive.set('black')\r\n    })\r\n    dragControls.addEventListener('dragstart', (event) => {\r\n      const mesh = event.object as Mesh\r\n      const material = mesh.material as MeshStandardMaterial\r\n      cameraControls.enabled = false\r\n      animation.play = false\r\n      material.emissive.set('orange')\r\n      material.opacity = 0.7\r\n      material.needsUpdate = true\r\n    })\r\n    dragControls.addEventListener('dragend', (event) => {\r\n      cameraControls.enabled = true\r\n      animation.play = true\r\n      const mesh = event.object as Mesh\r\n      const material = mesh.material as MeshStandardMaterial\r\n      material.emissive.set('black')\r\n      material.opacity = 1\r\n      material.needsUpdate = true\r\n    })\r\n    dragControls.enabled = false\r\n\r\n    // Full screen\r\n    window.addEventListener('dblclick', (event) => {\r\n      if (event.target === canvas) {\r\n        toggleFullScreen(canvas)\r\n      }\r\n    })\r\n  }\r\n\r\n  // ===== 🪄 HELPERS =====\r\n  {\r\n    axesHelper = new AxesHelper(4)\r\n    axesHelper.visible = false\r\n    scene.add(axesHelper)\r\n\r\n    pointLightHelper = new PointLightHelper(pointLight, undefined, 'orange')\r\n    pointLightHelper.visible = false\r\n    scene.add(pointLightHelper)\r\n\r\n    const gridHelper = new GridHelper(20, 20, 'teal', 'darkgray')\r\n    gridHelper.position.y = -0.01\r\n    scene.add(gridHelper)\r\n  }\r\n\r\n  // ===== 📈 STATS & CLOCK =====\r\n  {\r\n    clock = new Clock()\r\n    stats = new Stats()\r\n    document.body.appendChild(stats.dom)\r\n  }\r\n\r\n  // ==== 🐞 DEBUG GUI ====\r\n  {\r\n    gui = new GUI({ title: '🐞 Debug GUI', width: 300 })\r\n\r\n    const cubeOneFolder = gui.addFolder('Cube one')\r\n\r\n    cubeOneFolder.add(cube.position, 'x').min(-5).max(5).step(0.5).name('pos x')\r\n    cubeOneFolder\r\n      .add(cube.position, 'y')\r\n      .min(-5)\r\n      .max(5)\r\n      .step(1)\r\n      .name('pos y')\r\n      .onChange(() => (animation.play = false))\r\n      .onFinishChange(() => (animation.play = true))\r\n    cubeOneFolder.add(cube.position, 'z').min(-5).max(5).step(0.5).name('pos z')\r\n\r\n    cubeOneFolder.add(cube.material as MeshStandardMaterial, 'wireframe')\r\n    cubeOneFolder.addColor(cube.material as MeshStandardMaterial, 'color')\r\n    cubeOneFolder.add(cube.material as MeshStandardMaterial, 'metalness', 0, 1, 0.1)\r\n    cubeOneFolder.add(cube.material as MeshStandardMaterial, 'roughness', 0, 1, 0.1)\r\n\r\n    cubeOneFolder\r\n      .add(cube.rotation, 'x', -Math.PI * 2, Math.PI * 2, Math.PI / 4)\r\n      .name('rotate x')\r\n    cubeOneFolder\r\n      .add(cube.rotation, 'y', -Math.PI * 2, Math.PI * 2, Math.PI / 4)\r\n      .name('rotate y')\r\n      .onChange(() => (animation.play = false))\r\n      .onFinishChange(() => (animation.play = true))\r\n    cubeOneFolder\r\n      .add(cube.rotation, 'z', -Math.PI * 2, Math.PI * 2, Math.PI / 4)\r\n      .name('rotate z')\r\n\r\n    cubeOneFolder.add(animation, 'enabled').name('animated')\r\n\r\n    const controlsFolder = gui.addFolder('Controls')\r\n    controlsFolder.add(dragControls, 'enabled').name('drag controls')\r\n\r\n    const lightsFolder = gui.addFolder('Lights')\r\n    lightsFolder.add(pointLight, 'visible').name('point light')\r\n    lightsFolder.add(ambientLight, 'visible').name('ambient light')\r\n\r\n    const helpersFolder = gui.addFolder('Helpers')\r\n    helpersFolder.add(axesHelper, 'visible').name('axes')\r\n    helpersFolder.add(pointLightHelper, 'visible').name('pointLight')\r\n\r\n    const cameraFolder = gui.addFolder('Camera')\r\n    cameraFolder.add(cameraControls, 'autoRotate')\r\n\r\n    // persist GUI state in local storage on changes\r\n    gui.onFinishChange(() => {\r\n      const guiState = gui.save()\r\n      localStorage.setItem('guiState', JSON.stringify(guiState))\r\n    })\r\n\r\n    // load GUI state if available in local storage\r\n    const guiState = localStorage.getItem('guiState')\r\n    if (guiState) gui.load(JSON.parse(guiState))\r\n\r\n    // reset GUI state button\r\n    const resetGui = () => {\r\n      localStorage.removeItem('guiState')\r\n      gui.reset()\r\n    }\r\n    gui.add({ resetGui }, 'resetGui').name('RESET')\r\n\r\n    gui.close()\r\n  }\r\n}\r\n\r\nfunction animate() {\r\n  requestAnimationFrame(animate)\r\n\r\n  stats.begin()\r\n  if (animation.enabled && animation.play) {\r\n    animations.rotate(cube, clock, Math.PI / 3)\r\n    animations.bounce(cube, clock, 1, 0.5, 0.5)\r\n  }\r\n\r\n  if (resizeRendererToDisplaySize(renderer)) {\r\n    const canvas = renderer.domElement\r\n    camera.aspect = canvas.clientWidth / canvas.clientHeight\r\n    camera.updateProjectionMatrix()\r\n  }\r\n\r\n  cameraControls.update()\r\n\r\n  renderer.render(scene, camera)\r\n  stats.end()\r\n}\r\n"
      },
      "/home/project/src/style.css": {
        "type": "file",
        "content": ":root {\r\n  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  font-weight: 400;\r\n\r\n  color-scheme: dark;\r\n  color: rgba(255, 255, 255, 0.87);\r\n\r\n  font-synthesis: none;\r\n  text-rendering: optimizeLegibility;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-text-size-adjust: 100%;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  display: flex;\r\n  place-items: center;\r\n}\r\n\r\nbody,\r\nhtml {\r\n  height: 100%;\r\n}\r\n\r\ncanvas {\r\n  height: 100%;\r\n  width: 100%;\r\n  outline: none;\r\n\r\n  background: rgb(34, 193, 195);\r\n  background: linear-gradient(\r\n    0deg,\r\n    rgb(8, 163, 166) 0%,\r\n    rgba(79, 166, 167, 0.849) 8%,\r\n    rgba(61, 79, 94, 0.885) 40%,\r\n    rgb(17, 19, 23)\r\n  );\r\n}\r\n\r\nh1 {\r\n  font-size: 3.2em;\r\n  line-height: 1.1;\r\n}\r\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\r\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"useDefineForClassFields\": true,\r\n    \"module\": \"ESNext\",\r\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"sourceMap\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"isolatedModules\": true,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noImplicitReturns\": true\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url'\nimport { nodePolyfills } from 'vite-plugin-node-polyfills'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    tailwindcss(),\n    nodePolyfills()\n  ],\n  resolve: {\n    alias: {\n      \"@\": __dirname\n    },\n  },\n  // Optimize Three.js imports\n  optimizeDeps: {\n    include: ['three']\n  },\n  // Configure build for better Three.js performance\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          'three': ['three']\n        }\n      }\n    }\n  },\n  // Enable source maps for development\n  css: {\n    devSourcemap: true\n  }\n})"
      }
    }
  }
}