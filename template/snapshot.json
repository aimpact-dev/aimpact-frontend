{
  "vite-react-app": {
    "files": {
      "/home/project/index.html": {
        "type": "file",
        "content": "<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Vite + React + TS</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\r\n  </body>\r\n</html>\r\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\r\n  \"name\": \"vite-template\",\r\n  \"private\": true,\r\n  \"version\": \"0.0.1\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"dev\": \"vite\",\r\n    \"build\": \"tsc -b && vite build\",\r\n    \"preview\": \"vite preview\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@coral-xyz/anchor\": \"^0.31.1\",\r\n    \"@tailwindcss/vite\": \"^4.1.11\",\r\n    \"clsx\": \"^2.1.1\",\r\n    \"lucide-react\": \"^0.525.0\",\r\n    \"react\": \"^19.1.0\",\r\n    \"react-dom\": \"^19.1.0\",\r\n    \"recharts\": \"^3.1.0\",\r\n    \"tailwind-merge\": \"^3.3.0\",\r\n    \"tailwindcss\": \"^4.1.7\",\r\n    \"tw-animate-css\": \"^1.3.0\",\r\n    \"vite-plugin-node-polyfills\": \"0.24.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^22.15.21\",\r\n    \"@types/react\": \"^19.1.2\",\r\n    \"@types/react-dom\": \"^19.1.2\",\r\n    \"@vitejs/plugin-react\": \"^4.7.0\",\r\n    \"autoprefixer\": \"^10.4.21\",\r\n    \"globals\": \"^16.3.0\",\r\n    \"postcss\": \"^8.5.3\",\r\n    \"typescript\": \"~5.8.3\",\r\n    \"vite\": \"^6.3.5\"\r\n  },\r\n  \"packageManager\": \"pnpm@10.10.0\"\r\n}\r\n"
      },
      "/home/project/README.md": {
        "type": "file",
        "content": "# React + TypeScript + Vite\\n\\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\r\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/App.tsx": {
        "type": "file",
        "content": "function App() {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center justify-center w-screen h-screen\">\r\n        <h1 className='text-gray-300'>Hello world</h1>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n"
      },
      "/home/project/src/index.css": {
        "type": "file",
        "content": "@import \"tailwindcss\";\r\n/* @import \"tw-animate-css\"; */\r\n"
      },
      "/home/project/src/main.tsx": {
        "type": "file",
        "content": "import { StrictMode } from 'react'\r\nimport { createRoot } from 'react-dom/client'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\ncreateRoot(document.getElementById('root')!).render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n)\r\n"
      },
      "/home/project/src/utils": {
        "type": "folder"
      },
      "/home/project/src/utils/utils.ts": {
        "type": "file",
        "content": "import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\r\n"
      },
      "/home/project/tsconfig.app.json": {
        "type": "file",
        "content": "{\r\n  \"compilerOptions\": {\r\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\r\n    \"target\": \"ES2020\",\r\n    \"useDefineForClassFields\": true,\r\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\r\n    \"module\": \"ESNext\",\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"verbatimModuleSyntax\": false,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n    \"jsx\": \"react-jsx\",\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": false,\r\n    \"noUnusedParameters\": false,\r\n    \"erasableSyntaxOnly\": false,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUncheckedSideEffectImports\": true,\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@/*\": [\"./*\"]\r\n    }\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\r\n  \"files\": [],\r\n  \"references\": [\r\n    { \"path\": \"./tsconfig.app.json\" },\r\n    { \"path\": \"./tsconfig.node.json\" }\r\n  ],\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@/*\": [\"./*\"]\r\n    }\r\n  }\r\n}\r\n"
      },
      "/home/project/tsconfig.node.json": {
        "type": "file",
        "content": "{\r\n  \"compilerOptions\": {\r\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\r\n    \"target\": \"ES2022\",\r\n    \"lib\": [\"ES2023\"],\r\n    \"module\": \"ESNext\",\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"verbatimModuleSyntax\": false,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"erasableSyntaxOnly\": false,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUncheckedSideEffectImports\": true,\r\n  },\r\n  \"include\": [\"vite.config.ts\"]\r\n}\r\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\r\n\r\nimport { defineConfig } from 'vite'\r\nimport react from '@vitejs/plugin-react'\r\nimport tailwindcss from '@tailwindcss/vite'\r\nimport { fileURLToPath } from 'node:url';\r\nimport { nodePolyfills } from \"vite-plugin-node-polyfills\";\r\n\r\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\r\n\r\n// https://vite.dev/config/\r\nexport default defineConfig({\r\n  plugins: [react(), tailwindcss(), nodePolyfills()],\r\n  resolve: {\r\n    alias: {\r\n      \"@\": __dirname\r\n    },\r\n  },\r\n})\r\n"
      }
    }
  },
  "vite-threejs-app": {
    "files": {
      "/home/project/index.html": {
        "type": "file",
        "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/threejs-icon.svg\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Vite + Three.js</title>\r\n  </head>\r\n  <body>\r\n    <canvas id=\"scene\"></canvas>\r\n    <script type=\"module\" src=\"/src/scene.ts\"></script>\r\n  </body>\r\n</html>\r\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\r\n  \"name\": \"threejs-starter-vite\",\r\n  \"private\": true,\r\n  \"version\": \"1.0.0\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"dev\": \"vite\",\r\n    \"build\": \"tsc && vite build\",\r\n    \"preview\": \"vite preview\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@tailwindcss/vite\": \"^4.0.0-alpha.25\",\r\n    \"@types/three\": \"^0.176.0\",\r\n    \"typescript\": \"^5.8.2\",\r\n    \"tailwindcss\": \"^4.0.0-alpha.25\",\r\n    \"vite\": \"^6.3.5\",\r\n    \"vite-plugin-node-polyfills\": \"^0.22.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"lil-gui\": \"^0.20.0\",\r\n    \"stats.js\": \"^0.17.0\",\r\n    \"three\": \"^0.176.0\"\r\n  }\r\n}\r\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/scene.ts": {
        "type": "file",
        "content": "import * as THREE from 'three';\r\n\r\ninterface SceneSettings {\r\n  wireframe: boolean;\r\n  rotationSpeed: number;\r\n  backgroundColor: string;\r\n  enableAnimation: boolean;\r\n}\r\n\r\nexport class SceneManager {\r\n  private scene: THREE.Scene;\r\n  private camera: THREE.PerspectiveCamera;\r\n  private renderer: THREE.WebGLRenderer;\r\n  private cube: THREE.Mesh;\r\n  private animationId: number = 0;\r\n\r\n  // FPS tracking\r\n  private frameCount: number = 0;\r\n  private lastTime: number = 0;\r\n  private fps: number = 0;\r\n  private fpsElement: HTMLElement;\r\n\r\n  // Settings\r\n  private settings: SceneSettings = {\r\n    wireframe: false,\r\n    rotationSpeed: 0.01,\r\n    backgroundColor: '#1a1a1a',\r\n    enableAnimation: true\r\n  };\r\n\r\n  constructor() {\r\n    this.initScene();\r\n    this.initUI();\r\n    this.setupEventListeners();\r\n    this.animate();\r\n  }\r\n\r\n  private initScene(): void {\r\n    // Scene\r\n    this.scene = new THREE.Scene();\r\n    this.scene.background = new THREE.Color(this.settings.backgroundColor);\r\n\r\n    // Camera\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    this.camera.position.z = 5;\r\n\r\n    // Renderer\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.renderer.shadowMap.enabled = true;\r\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    document.body.appendChild(this.renderer.domElement);\r\n\r\n    // Lighting\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\r\n    this.scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(1, 1, 1);\r\n    directionalLight.castShadow = true;\r\n    this.scene.add(directionalLight);\r\n\r\n    // Create a cube\r\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n    const material = new THREE.MeshLambertMaterial({\r\n      color: 0x00ff00,\r\n      wireframe: this.settings.wireframe\r\n    });\r\n    this.cube = new THREE.Mesh(geometry, material);\r\n    this.cube.castShadow = true;\r\n    this.scene.add(this.cube);\r\n\r\n    // Ground plane\r\n    const groundGeometry = new THREE.PlaneGeometry(10, 10);\r\n    const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x888888 });\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = -2;\r\n    ground.receiveShadow = true;\r\n    this.scene.add(ground);\r\n  }\r\n\r\n  private initUI(): void {\r\n    // FPS Counter\r\n    this.fpsElement = document.createElement('div');\r\n    this.fpsElement.id = 'fps-counter';\r\n    this.fpsElement.textContent = 'FPS: 0';\r\n    document.body.appendChild(this.fpsElement);\r\n\r\n    // Settings Panel\r\n    const settingsPanel = document.createElement('div');\r\n    settingsPanel.id = 'settings-panel';\r\n    settingsPanel.innerHTML = `\r\n      <h3>Settings</h3>\r\n      <div class=\"setting-item\">\r\n        <label>\r\n          <input type=\"checkbox\" id=\"wireframe\" ${this.settings.wireframe ? 'checked' : ''}>\r\n          Wireframe Mode\r\n        </label>\r\n      </div>\r\n      <div class=\"setting-item\">\r\n        <label>\r\n          Animation Speed: <span id=\"speed-value\">${this.settings.rotationSpeed.toFixed(3)}</span>\r\n        </label>\r\n        <input type=\"range\" id=\"rotation-speed\" min=\"0\" max=\"0.05\" step=\"0.001\" value=\"${this.settings.rotationSpeed}\">\r\n      </div>\r\n      <div class=\"setting-item\">\r\n        <label>\r\n          Background Color:\r\n        </label>\r\n        <input type=\"color\" id=\"bg-color\" value=\"${this.settings.backgroundColor}\">\r\n      </div>\r\n      <div class=\"setting-item\">\r\n        <label>\r\n          <input type=\"checkbox\" id=\"enable-animation\" ${this.settings.enableAnimation ? 'checked' : ''}>\r\n          Enable Animation\r\n        </label>\r\n      </div>\r\n      <button id=\"reset-button\">Reset Scene</button>\r\n    `;\r\n    document.body.appendChild(settingsPanel);\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // Window resize\r\n    window.addEventListener('resize', () => this.onWindowResize());\r\n\r\n    // Settings controls\r\n    const wireframeToggle = document.getElementById('wireframe') as HTMLInputElement;\r\n    wireframeToggle?.addEventListener('change', (e) => {\r\n      this.settings.wireframe = (e.target as HTMLInputElement).checked;\r\n      (this.cube.material as THREE.MeshLambertMaterial).wireframe = this.settings.wireframe;\r\n    });\r\n\r\n    const speedSlider = document.getElementById('rotation-speed') as HTMLInputElement;\r\n    const speedValue = document.getElementById('speed-value');\r\n    speedSlider?.addEventListener('input', (e) => {\r\n      this.settings.rotationSpeed = parseFloat((e.target as HTMLInputElement).value);\r\n      if (speedValue) speedValue.textContent = this.settings.rotationSpeed.toFixed(3);\r\n    });\r\n\r\n    const bgColorPicker = document.getElementById('bg-color') as HTMLInputElement;\r\n    bgColorPicker?.addEventListener('change', (e) => {\r\n      this.settings.backgroundColor = (e.target as HTMLInputElement).value;\r\n      this.scene.background = new THREE.Color(this.settings.backgroundColor);\r\n    });\r\n\r\n    const animationToggle = document.getElementById('enable-animation') as HTMLInputElement;\r\n    animationToggle?.addEventListener('change', (e) => {\r\n      this.settings.enableAnimation = (e.target as HTMLInputElement).checked;\r\n    });\r\n\r\n    const resetButton = document.getElementById('reset-button');\r\n    resetButton?.addEventListener('click', () => this.resetScene());\r\n  }\r\n\r\n  private onWindowResize(): void {\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  private updateFPS(): void {\r\n    this.frameCount++;\r\n    const currentTime = performance.now();\r\n\r\n    if (currentTime - this.lastTime >= 1000) {\r\n      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));\r\n      this.fpsElement.textContent = `FPS: ${this.fps}`;\r\n      this.frameCount = 0;\r\n      this.lastTime = currentTime;\r\n    }\r\n  }\r\n\r\n  private resetScene(): void {\r\n    this.cube.rotation.set(0, 0, 0);\r\n    this.cube.position.set(0, 0, 0);\r\n    this.camera.position.set(0, 0, 5);\r\n    this.camera.lookAt(0, 0, 0);\r\n  }\r\n\r\n  private animate(): void {\r\n    this.animationId = requestAnimationFrame(() => this.animate());\r\n\r\n    if (this.settings.enableAnimation) {\r\n      this.cube.rotation.x += this.settings.rotationSpeed;\r\n      this.cube.rotation.y += this.settings.rotationSpeed;\r\n    }\r\n\r\n    this.updateFPS();\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  public dispose(): void {\r\n    cancelAnimationFrame(this.animationId);\r\n    this.renderer.dispose();\r\n\r\n    // Clean up geometries and materials\r\n    this.scene.traverse((object) => {\r\n      if (object instanceof THREE.Mesh) {\r\n        object.geometry.dispose();\r\n        if (object.material instanceof THREE.Material) {\r\n          object.material.dispose();\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// Initialize the scene when the DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  new SceneManager();\r\n});\r\n"
      },
      "/home/project/src/style.css": {
        "type": "file",
        "content": "/* Reset and base styles */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  overflow: hidden;\r\n  background: #000;\r\n  color: #fff;\r\n}\r\n\r\ncanvas {\r\n  display: block;\r\n  cursor: grab;\r\n}\r\n\r\ncanvas:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n/* FPS Counter */\r\n#fps-counter {\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 20px;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  color: #00ff00;\r\n  padding: 8px 12px;\r\n  border-radius: 4px;\r\n  font-family: 'Courier New', monospace;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  border: 1px solid #333;\r\n  z-index: 100;\r\n  backdrop-filter: blur(5px);\r\n}\r\n\r\n/* Settings Panel */\r\n#settings-panel {\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: rgba(20, 20, 20, 0.9);\r\n  border: 1px solid #444;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  min-width: 250px;\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n  backdrop-filter: blur(10px);\r\n  z-index: 100;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n#settings-panel h3 {\r\n  margin-bottom: 15px;\r\n  color: #fff;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  border-bottom: 1px solid #444;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.setting-item {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.setting-item label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  color: #ccc;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Input styles */\r\ninput[type=\"checkbox\"] {\r\n  margin-right: 8px;\r\n  transform: scale(1.1);\r\n  accent-color: #00ff00;\r\n}\r\n\r\ninput[type=\"range\"] {\r\n  width: 100%;\r\n  height: 4px;\r\n  background: #333;\r\n  outline: none;\r\n  border-radius: 2px;\r\n  margin-top: 5px;\r\n}\r\n\r\ninput[type=\"range\"]::-webkit-slider-thumb {\r\n  appearance: none;\r\n  width: 16px;\r\n  height: 16px;\r\n  background: #00ff00;\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  border: 2px solid #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\ninput[type=\"range\"]::-moz-range-thumb {\r\n  width: 16px;\r\n  height: 16px;\r\n  background: #00ff00;\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  border: 2px solid #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\ninput[type=\"color\"] {\r\n  width: 40px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  background: transparent;\r\n}\r\n\r\ninput[type=\"color\"]::-webkit-color-swatch-wrapper {\r\n  padding: 0;\r\n  border-radius: 4px;\r\n  border: 1px solid #555;\r\n}\r\n\r\ninput[type=\"color\"]::-webkit-color-swatch {\r\n  border: none;\r\n  border-radius: 3px;\r\n}\r\n\r\n/* Button styles */\r\n#reset-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background: linear-gradient(45deg, #333, #555);\r\n  color: #fff;\r\n  border: 1px solid #666;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n  margin-top: 10px;\r\n}\r\n\r\n#reset-button:hover {\r\n  background: linear-gradient(45deg, #444, #666);\r\n  border-color: #777;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n#reset-button:active {\r\n  transform: translateY(0);\r\n  background: linear-gradient(45deg, #222, #444);\r\n}\r\n\r\n/* Speed value display */\r\n#speed-value {\r\n  color: #00ff00;\r\n  font-family: 'Courier New', monospace;\r\n  font-weight: bold;\r\n  margin-left: 5px;\r\n}\r\n\r\n/* Scrollbar styling */\r\n#settings-panel::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n#settings-panel::-webkit-scrollbar-track {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 3px;\r\n}\r\n\r\n#settings-panel::-webkit-scrollbar-thumb {\r\n  background: rgba(255, 255, 255, 0.3);\r\n  border-radius: 3px;\r\n}\r\n\r\n#settings-panel::-webkit-scrollbar-thumb:hover {\r\n  background: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n/* Responsive design */\r\n@media (max-width: 768px) {\r\n  #settings-panel {\r\n    right: 10px;\r\n    left: 10px;\r\n    top: 10px;\r\n    min-width: auto;\r\n    max-height: 60vh;\r\n  }\r\n\r\n  #fps-counter {\r\n    top: 10px;\r\n    left: 10px;\r\n    font-size: 12px;\r\n    padding: 6px 10px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  #settings-panel {\r\n    padding: 15px;\r\n  }\r\n\r\n  #settings-panel h3 {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .setting-item label {\r\n    font-size: 12px;\r\n  }\r\n\r\n  #reset-button {\r\n    padding: 8px;\r\n    font-size: 12px;\r\n  }\r\n}\r\n\r\n/* Loading animation */\r\n@keyframes pulse {\r\n  0% { opacity: 0.6; }\r\n  50% { opacity: 1; }\r\n  100% { opacity: 0.6; }\r\n}\r\n\r\n.loading {\r\n  animation: pulse 1.5s ease-in-out infinite;\r\n}\r\n\r\n/* Smooth transitions */\r\n* {\r\n  transition: opacity 0.2s ease, transform 0.2s ease;\r\n}\r\n\r\n/* Focus states for accessibility */\r\ninput:focus,\r\nbutton:focus {\r\n  outline: 2px solid #00ff00;\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* Selection styling */\r\n::selection {\r\n  background: rgba(0, 255, 0, 0.3);\r\n  color: #fff;\r\n}\r\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\r\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"useDefineForClassFields\": true,\r\n    \"module\": \"ESNext\",\r\n    \"lib\": [\"ESNext\", \"DOM\", \"DOM.Iterable\"],\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"sourceMap\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"isolatedModules\": true,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noImplicitReturns\": true\r\n  },\r\n  \"include\": [\"src\"]\r\n}\r\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url'\nimport { nodePolyfills } from 'vite-plugin-node-polyfills'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    tailwindcss(),\n    nodePolyfills()\n  ],\n  resolve: {\n    alias: {\n      \"@\": __dirname\n    },\n  },\n  // Optimize Three.js imports\n  optimizeDeps: {\n    include: ['three']\n  },\n  // Configure build for better Three.js performance\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          'three': ['three']\n        }\n      }\n    }\n  },\n  // Enable source maps for development\n  css: {\n    devSourcemap: true\n  }\n})"
      }
    }
  }
}