{
  "vite-react-app": {
    "assistantMessage": "\nBolt is initializing your project with the required files using the Vite.js Default template.\n<boltArtifact id=\"imported-files\" title=\"Create initial files\" type=\"bundled\">\n<boltAction type=\"file\" filePath=\"/home/project/index.html\">\n  <!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/package.json\">\n  {\n  \"name\": \"vite-template\",\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc -b && vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@coral-xyz/anchor\": \"^0.31.1\",\n    \"@solana/wallet-adapter-base\": \"^0.9.26\",\n    \"@solana/wallet-adapter-phantom\": \"^0.9.27\",\n    \"@solana/wallet-adapter-react\": \"^0.15.38\",\n    \"@solana/wallet-adapter-react-ui\": \"^0.9.38\",\n    \"@solana/web3.js\": \"^1.98.2\",\n    \"@tailwindcss/vite\": \"^4.1.7\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.511.0\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"recharts\": \"^2.15.3\",\n    \"tailwind-merge\": \"^3.3.0\",\n    \"tailwindcss\": \"^4.1.7\",\n    \"tw-animate-css\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22.15.21\",\n    \"@types/react\": \"^19.1.2\",\n    \"@types/react-dom\": \"^19.1.2\",\n    \"@vitejs/plugin-react\": \"^4.4.1\",\n    \"autoprefixer\": \"^10.4.21\",\n    \"globals\": \"^16.0.0\",\n    \"postcss\": \"^8.5.3\",\n    \"typescript\": \"~5.8.3\",\n    \"vite\": \"^6.3.5\"\n  }\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/App.tsx\">\n  function App() {\n  return (\n    <>\n      <div className=\"flex items-center justify-center w-screen h-screen\">\n        <h1 className=\"text-gray-300\">Hello world</h1>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/components/SolanaProvider.tsx\">\n  import React, { FC, ReactNode, useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Default styles that can be overridden by your app\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\ninterface SolanaProviderProps {\n  children: ReactNode;\n}\n\nexport const SolanaProvider: FC<SolanaProviderProps> = ({ children }) => {\n  const network = WalletAdapterNetwork.Devnet;\n\n  // can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(() => [new PhantomWalletAdapter()], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/index.css\">\n  @import \"tailwindcss\";\n/* @import \"tw-animate-css\"; */\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/main.tsx\">\n  import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { SolanaProvider } from './components/SolanaProvider';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <SolanaProvider>\n      <App />\n    </SolanaProvider>\n  </StrictMode>,\n);\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/solana/client.ts\">\n  import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, AnchorProvider, BN, web3 } from '@coral-xyz/anchor';\nimport { AnchorWallet } from '@solana/wallet-adapter-react';\nimport idl from './idl.json';\nconst PROGRAM_ID = new PublicKey(idl.address);\n\nexport class SolanaClient {\n  private connection: Connection;\n  private provider: AnchorProvider;\n  private program: any;\n\n  constructor(wallet: AnchorWallet) {\n    this.connection = new Connection(clusterApiUrl('devnet'));\n\n    this.provider = new AnchorProvider(this.connection, wallet, { commitment: 'confirmed' });\n\n    try {\n      this.program = new Program(idl, this.provider);\n    } catch (error) {\n      console.error('Program initialization error:', error);\n      // For now, create a minimal program interface\n      this.program = {\n        methods: {\n          initialize: () => ({ accounts: () => ({ rpc: () => Promise.resolve('mock-tx') }) }),\n          set: () => ({ accounts: () => ({ rpc: () => Promise.resolve('mock-tx') }) }),\n        },\n        account: {\n          val: {\n            fetch: () => Promise.resolve({ value: new BN(0) }),\n          },\n        },\n      };\n    }\n  }\n\n  async initialize(domain: number, key: number): Promise<string> {\n    try {\n      // Generate PDA for the account\n      const [valPda] = PublicKey.findProgramAddressSync(\n        [Buffer.from(domain.toString()), Buffer.from(key.toString())],\n        PROGRAM_ID,\n      );\n\n      const tx = await this.program.methods\n        .initialize(new BN(domain), new BN(key))\n        .accounts({\n          val: valPda,\n          signer: this.provider.wallet.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n        })\n        .rpc();\n      return tx;\n    } catch (error) {\n      console.error('Initialize error:', error);\n      throw error;\n    }\n  }\n\n  async setValue(domain: number, key: number, value: number): Promise<string> {\n    try {\n      // Generate PDA for the account\n      const [valPda] = PublicKey.findProgramAddressSync(\n        [Buffer.from(domain.toString()), Buffer.from(key.toString())],\n        PROGRAM_ID,\n      );\n\n      const tx = await this.program.methods\n        .set(new BN(domain), new BN(key), new BN(value))\n        .accounts({\n          val: valPda,\n        })\n        .rpc();\n      return tx;\n    } catch (error) {\n      console.error('Set value error:', error);\n      throw error;\n    }\n  }\n\n  async getValue(domain: number, key: number): Promise<number> {\n    try {\n      // Generate PDA for the account\n      const [valPda] = PublicKey.findProgramAddressSync(\n        [Buffer.from(domain.toString()), Buffer.from(key.toString())],\n        PROGRAM_ID,\n      );\n\n      const account = await this.program.account.val.fetch(valPda);\n      return account.value.toNumber();\n    } catch (error) {\n      console.error('Get value error:', error);\n      throw error;\n    }\n  }\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/solana/idl.json\">\n  {\n  \"address\": \"6ytMmvJR2YYsuPR7FSQUQnb7UGi1rf36BrXzZUNvKsnj\",\n  \"metadata\": {\n    \"name\": \"mappings\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"get\",\n      \"discriminator\": [161, 224, 50, 61, 5, 210, 122, 216],\n      \"accounts\": [\n        {\n          \"name\": \"val\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"domain\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"key\",\n          \"type\": \"u64\"\n        }\n      ],\n      \"returns\": \"u64\"\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"val\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"arg\",\n                \"path\": \"domain\"\n              },\n              {\n                \"kind\": \"arg\",\n                \"path\": \"key\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"signer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"domain\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"key\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"set\",\n      \"discriminator\": [198, 51, 53, 241, 116, 29, 126, 194],\n      \"accounts\": [\n        {\n          \"name\": \"val\",\n          \"writable\": true\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"domain\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"key\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"Val\",\n      \"discriminator\": [117, 195, 162, 127, 63, 84, 168, 122]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Val\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"value\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/utils/utils.ts\">\n  import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/src/vite-env.d.ts\">\n  /// <reference types=\"vite/client\" />\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/tsconfig.app.json\">\n  {\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"erasableSyntaxOnly\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"src\"]\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/tsconfig.json\">\n  {\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/tsconfig.node.json\">\n  {\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"erasableSyntaxOnly\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n\n</boltAction>\n<boltAction type=\"file\" filePath=\"/home/project/vite.config.ts\">\n  /// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url';\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n  resolve: {\n    alias: {\n      \"@\": __dirname\n    },\n  },\n})\n\n</boltAction>\n</boltArtifact>\n",
    "userMessage": "\n---\ntemplate import is done, and you can now use the imported files,\nedit only the files that need to be changed, and you can create new files as needed.\nNO NOT EDIT/WRITE ANY FILES THAT ALREADY EXIST IN THE PROJECT AND DOES NOT NEED TO BE MODIFIED\n---\nNow that the Template is imported please continue with my original request\n\nIMPORTANT: Dont Forget to install the dependencies before running the app by using `npm install && npm run dev` or `pnpm install && pnpm run dev`\n"
  }
}